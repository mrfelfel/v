package ir.soheil.hamshahri.ui.activity.profile.owner;

import android.Manifest;
import android.animation.IntEvaluator;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.LocationManager;
import android.os.Bundle;
import android.text.Editable;
import android.text.Selection;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.afollestad.materialdialogs.MaterialDialog;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.lassi.common.utils.KeyUtils;
import com.lassi.data.media.MiMedia;
import com.lassi.domain.media.LassiOption;
import com.lassi.presentation.builder.Lassi;
import com.lassi.presentation.cropper.CropImageView;
import com.soheil.location.picker.LocationPickerActivity;
import com.soheil.location.picker.model.PlaceModel;
import com.tbruyelle.rxpermissions2.RxPermissions;
//import com.soheil.loccation.picker.LocationPickerActivity;
//import com.soheil.loccation.picker.model.PlaceModel;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import ir.soheil.hamshahri.app.App;
import ir.soheil.hamshahri.R;
import ir.soheil.hamshahri.model.SimpleItem;
import ir.soheil.hamshahri.model.image.Image;
import ir.soheil.hamshahri.model.profile.JobUpdateModel;
import ir.soheil.hamshahri.model.profile.ProfileData;
import ir.soheil.hamshahri.model.profile.ProfileResponse;
import ir.soheil.hamshahri.presenter.profile.ProfilePresenter;
import ir.soheil.hamshahri.ui.activity.base.BaseLoggableActivity;
import ir.soheil.hamshahri.ui.adapter.ImagesAdapter;
import ir.soheil.hamshahri.utils.AppUtils;
import ir.soheil.hamshahri.utils.Constants;
import ir.soheil.hamshahri.utils.NetworkUtils;
import ir.soheil.hamshahri.utils.OSUtils;
import ir.soheil.hamshahri.utils.PrefManager;
import ir.soheil.hamshahri.utils.TextUtil;
import ir.soheil.hamshahri.utils.ToastUtils;
import ir.soheil.hamshahri.utils.TypefaceUtil;
import ir.soheil.hamshahri.utils.Utility;

import static ir.soheil.hamshahri.utils.Constants.REQUEST_TURN_ON_GPS;
import static ir.soheil.hamshahri.utils.TypefaceUtil.getSansFont;

public class EditJobActivity extends BaseLoggableActivity {

    @BindView(R.id.tv_job_group)
    TextView tvJobGroup;

    @BindView(R.id.btn_job_group)
    Button btnJobGroup;

    @BindView(R.id.input_job_name)
    EditText inputJobName;

    @BindView(R.id.input_job_info)
    EditText inputJobInfo;

    @BindView(R.id.input_workplace_name)
    EditText inputWorkplaceName;

    @BindView(R.id.input_workplace_phone)
    EditText inputWorkplacePhone;

    @BindView(R.id.recycler_workplace_photos)
    RecyclerView recyclerPhotos;

    @BindView(R.id.view_preview_help_images)
    View viewImagesPreview;

    @BindView(R.id.input_workplace_address)
    EditText inputWorkplaceAddress;

    @BindView(R.id.input_workplace_info)
    EditText inputWorkplaceInfo;

    private static final String TAG = EditJobActivity.class.getSimpleName();

    private static final int REQUEST_CODE_PICK_ADDRESS = 20;
    private static final int REQUEST_CODE_PICK_IMAGE = 21;

    private JobUpdateModel updateModel;

    private GoogleMap map;
    private Circle mapCircle;

    private PrefManager pref;
    private ProfileResponse profile;

    private ImagesAdapter imagesAdapter;

    @Override
    protected int getContentResId() {
        return R.layout.activity_edit_job;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ButterKnife.bind(this);
        initClass();
        initToolBar();
        getProfile();
    }

    private void initToolBar() {
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        setUpActionBarWithUpButton();
        setActionBarTitle(getString(R.string.title_activity_job_info));
    }

    private void initPhotosRecycler() {
        recyclerPhotos.setHasFixedSize(true);
        recyclerPhotos.setNestedScrollingEnabled(false);
        recyclerPhotos.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));

        // assign signature to images
        List<Image> images = profile.getData().getWorkplace().getImages();
        for (int i = 0; i < images.size(); i++) {
            images.get(i).setSignature();
        }

        imagesAdapter = new ImagesAdapter(this, images);
        recyclerPhotos.setAdapter(imagesAdapter);
    }

    private void initClass() {
        pref = new PrefManager(this);
        updateModel = new JobUpdateModel();
    }

    private void getProfile() {
//        if (App.getDB().hasProfile(pref.getMobile())) {
            getProfileFromServer();
//        } else {
//            getProfileFromServer();
//        }
    }

    private void getProfileFromServer() {

        if (!NetworkUtils.isNetworkAvailable(this))
            return;

        showProgressDialog(getString(R.string.please_wait), true, false);

        ProfilePresenter.getUserProfile(pref.getAuthToken(), new ProfilePresenter.Listener() {
            @Override
            public void onUserProfileCreated(ProfileResponse response) {

            }

            @Override
            public void onProfileReceived(ProfileResponse response) {

                hideProgressDialog();

                profile = response;

                initUpdateModel(profile.getData());

                App.getDB().saveProfile(response);

                showProfile();
            }

            @Override
            public void onProfileUpdated(ProfileResponse profileResponse) {

            }

            @Override
            public void onUsernameUpdated(ProfileResponse response) {

            }

            @Override
            public void onNatUpdated(ProfileResponse response) {

            }

            @Override
            public void onError(Throwable t) {
                hideProgressDialog();

                ToastUtils.shortToast(getString(R.string.error_unable_to_get_profile));
            }
        });
    }

    /**
     * init update model with profile data
     *
     * @param data: profile response
     */
    private void initUpdateModel(ProfileData data) {
        updateModel.setJobGroupId(data.getJob().getGroup().getId());
        updateModel.setJobName(data.getJob().getName());
        updateModel.setJobInfo(data.getJob().getAbout());
        updateModel.setWorkplaceName(data.getWorkplace().getName());
        updateModel.setWorkplacePhone(data.getWorkplace().getPhone());
        updateModel.setWorkplaceLat(data.getWorkplace().getLat());
        updateModel.setWorkplaceLon(data.getWorkplace().getLon());
        updateModel.setWorkplaceAddress(data.getWorkplace().getAddress());
        updateModel.setWorkplaceInfo(data.getWorkplace().getAbout());

        List<Integer> images = new ArrayList<>();

        for (int i = 0; i < data.getWorkplace().getImages().size(); i++) {
            images.add(data.getWorkplace().getImages().get(i).getId());
        }

        // assign image id(s)
        updateModel.setWorkplaceImages(images);
        updateModel.setWorkplaceImagesList(data.getWorkplace().getImages());
    }

    private void showProfile() {

        initPhotosRecycler();

        // job group
        jobGroup = profile.getData().getJob().getGroup();

        // job
        btnJobGroup.setText(TextUtil.notNull(profile.getData().getJob().getGroup().getTitle()) ? profile.getData().getJob().getGroup().getTitle() : getString(R.string.do_select));
        inputJobName.setText(TextUtil.checkNull(profile.getData().getJob().getName()));
        inputJobInfo.setText(TextUtil.checkNull(profile.getData().getJob().getAbout()));

        // workplace
        inputWorkplaceName.setText(TextUtil.checkNull(profile.getData().getWorkplace().getName()));
        inputWorkplacePhone.setText(TextUtil.checkNull(profile.getData().getWorkplace().getPhone()));
        inputWorkplaceAddress.setText(TextUtil.checkNull(profile.getData().getWorkplace().getAddress()));
        inputWorkplaceInfo.setText(TextUtil.checkNull(profile.getData().getWorkplace().getAbout()));

        // job seeker
        if (profile.getData().getJob().getGroup().getId() == Constants.JOB_SEEKER) {
            tvJobGroup.setText(getString(R.string.job_status));
            inputJobName.setText(getString(R.string.your_req_job_name));

            // job group
        } else {
            tvJobGroup.setText(getString(R.string.job_group));
        }

        // show workplace on map
        setupMap();

        // setup pointer
        int position = inputJobName.length();
        Editable eText = inputJobName.getText();
        Selection.setSelection(eText, position);
    }

    private void setupMap() {

        try {
            SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);

            mapFragment.getMapAsync(googleMap -> {
                map = googleMap;
                initializeLocation();
            });

        } catch (Exception ignored) {
        }
    }

    private void initializeLocation() {

        map.clear();

        if (map == null)
            return;

        map.setMapType(GoogleMap.MAP_TYPE_NORMAL);
        map.setBuildingsEnabled(false);
        map.setIndoorEnabled(false);
        map.setTrafficEnabled(false);
        map.getUiSettings().setRotateGesturesEnabled(false);
        map.getUiSettings().setZoomControlsEnabled(true);

        // permissions
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED &&
                ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            map.setMyLocationEnabled(true);
        }

        // position
        double lat = updateModel.getWorkplaceLat();
        double lon = updateModel.getWorkplaceLon();

        // marker
        addMarker(lat, lon, BitmapDescriptorFactory.HUE_RED, getString(R.string.workplace_position), null);

        // circle shape
        mapCircle = addCircle(lat, lon);

        // circle animation
        startCircleAnimation();

        // update camera
        map.moveCamera(CameraUpdateFactory.newLatLng(new LatLng(lat, lon)));

        // animate camera
        map.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lon), 10.0f));
    }

    private void startCircleAnimation() {
        ValueAnimator valueAnimator = new ValueAnimator();
        valueAnimator.setRepeatCount(ValueAnimator.INFINITE);
        valueAnimator.setRepeatMode(ValueAnimator.REVERSE);
        valueAnimator.setIntValues(20, 100);
        valueAnimator.setDuration(2000);
        valueAnimator.setEvaluator(new IntEvaluator());
        valueAnimator.setInterpolator(new AccelerateDecelerateInterpolator());
        valueAnimator.addUpdateListener(valueAnimator1 -> {
            float animatedFraction = valueAnimator1.getAnimatedFraction();
            mapCircle.setRadius(animatedFraction * 5000);
        });
        valueAnimator.start();
    }

    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        getMenuInflater().inflate(R.menu.menu_done, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.menu_done) {
            updateProfileToServer();
        } else {
            onBackPressed();
        }
        return super.onOptionsItemSelected(item);
    }

    private void updateProfileToServer() {

        if (!NetworkUtils.isNetworkAvailable(this)) {
            Toast.makeText(this, getString(R.string.error_in_operation), Toast.LENGTH_SHORT).show();
            return;
        }

        OSUtils.hideSoftKeyboard(this);



        updateProfile();
    }

    private void updateProfile() {

        if (!NetworkUtils.isNetworkAvailable(this)) {
            Toast.makeText(this, getString(R.string.error_in_operation), Toast.LENGTH_SHORT).show();
            return;
        }

        if (!isValidInfo())
            return;

        showProgressDialog(getString(R.string.please_wait), true, false);

        ProfilePresenter.updateJob(pref.getAuthToken(), updateModel, new ProfilePresenter.Listener() {
            @Override
            public void onUserProfileCreated(ProfileResponse response) {

            }

            @Override
            public void onProfileReceived(ProfileResponse profileResponse) {

            }

            @Override
            public void onProfileUpdated(ProfileResponse profile) {

                hideProgressDialog();

                Toast.makeText(EditJobActivity.this, getString(R.string.toast_profile_updated),
                        Toast.LENGTH_SHORT).show();

                App.getDB().saveProfile(profile);

                finish();
            }

            @Override
            public void onUsernameUpdated(ProfileResponse response) {

            }

            @Override
            public void onNatUpdated(ProfileResponse response) {

            }

            @Override
            public void onError(Throwable t) {
                ToastUtils.shortToast(t.getMessage());
                hideProgressDialog();
            }
        });
    }

    public boolean isValidInfo() {

        StringBuilder builder = new StringBuilder();

        int jobGroupId = updateModel.getJobGroupId();

        String jobName = updateModel.getJobName();
        // String jobInfo = updateModel.getJobInfo();
        String workplaceName = updateModel.getWorkplaceName();
        String workplacePhone = updateModel.getWorkplacePhone();
        String workplaceAddress = updateModel.getWorkplaceAddress();

        String newLine = "\n";
        boolean valid = true;

        if (jobGroupId == 0) {

            MaterialDialog.Builder dialogBuilder = new MaterialDialog.Builder(this);
            dialogBuilder.titleGravity(Utility.getGravity());
            dialogBuilder.contentGravity(Utility.getGravity());
            dialogBuilder.buttonsGravity(Utility.getGravity());
            dialogBuilder.typeface(getSansFont(), getSansFont());
            dialogBuilder.title(R.string.title_unselected_job_group);
            dialogBuilder.content(R.string.note_unselected_job_group);
            dialogBuilder.positiveColorRes(R.color.colorPrimary);
            dialogBuilder.widgetColorRes(R.color.colorPrimary);
            dialogBuilder.positiveText(R.string.select);
            dialogBuilder.negativeText(R.string.edit);
            dialogBuilder.onPositive((dialog, which) -> updateProfile());
            dialogBuilder.onNegative((dialog, which) -> dialog.dismiss());
            dialogBuilder.show();

            return false;
        }

        // job name
        if (jobName.isEmpty()) {
            builder.append(getString(R.string.error_insert_job_name));
            valid = false;
        }

        // workplace name
        if (!workplaceName.isEmpty()) {
            if (workplaceName.length() < 3) {
                builder.append(newLine);
                builder.append(getString(R.string.error_invalid_workplace_name));
                valid = false;
            }
        }

        // workplace phone
        if (!workplacePhone.isEmpty() && workplacePhone.length() <= 5) {
            builder.append(newLine);
            builder.append(getString(R.string.error_invalid_phone));
            valid = false;
        }

        // workplace address
        if (workplaceAddress.length() > 0 && workplaceAddress.length() < 8) {
            builder.append(newLine);
            builder.append(getString(R.string.error_address_is_short));
            valid = false;
        }

        if (!valid) {
            MaterialDialog.Builder dialogBuilder = new MaterialDialog.Builder(this);
            dialogBuilder.titleGravity(Utility.getGravity());
            dialogBuilder.contentGravity(Utility.getGravity());
            dialogBuilder.buttonsGravity(Utility.getGravity());
            dialogBuilder.typeface(getSansFont(), getSansFont());
            dialogBuilder.title(R.string.dialog_check_errors);
            dialogBuilder.positiveColorRes(R.color.colorPrimary);
            dialogBuilder.widgetColorRes(R.color.colorPrimary);
            dialogBuilder.content(builder.toString());
            dialogBuilder.positiveText(R.string.ok);
            dialogBuilder.show();
            return false;

        } else {
            return true;
        }
    }

    private void showJobsGroupDialog() {

//        List<JobItem> allJobs = App.getDB().getJobs();
//        final List<SearchItem> dataList = new ArrayList<>();
//
//        for (int i = 0; i < allJobs.size(); i++) {
//            dataList.add(new SearchItem(i, allJobs.get(i).getName()));
//        }
//
//        SearchableDialog searchLocationsDialog = new SearchableDialog(this, dataList, getString(R.string.job_groups));
//
//        searchLocationsDialog.setOnItemSelected((position, searchItem) -> {
//
//             update job group name on view
//            btnJobGroup.setText(dataList.get(position).getTitle());
//
//             update job group model
//            jobGroup.setId(dataList.get(position).getId() + 1);
//
//             job seeker
//            if ((dataList.get(position).getId() + 1) == Constants.JOB_SEEKER) {
//                tvJobGroup.setText(getString(R.string.job_status));
//                inputJobName.setHint(getString(R.string.your_req_job_name));
//
//                 job group
//            } else {
//                tvJobGroup.setText(getString(R.string.job_group));
//                inputJobName.setHint(getString(R.string.name));
//            }
//
//            updateModel.setJobGroupId(dataList.get(position).getId() + 1);
//
//        });
//
//        searchLocationsDialog.show();
    }

    public void addMarker(double lat, double lon, float markerColor, String title, String snippet) {
        if (map != null) {
            Marker lastMarker = map.addMarker(new MarkerOptions()
                    .title(title)
                    .snippet(snippet)
                    .position(new LatLng(lat, lon))
                    .icon(BitmapDescriptorFactory.defaultMarker(markerColor))
            );
            lastMarker.setDraggable(false);
            lastMarker.showInfoWindow();

        } else {
            ToastUtils.longToast(getString(R.string.toast_error_no_map));
        }
    }

    private Circle addCircle(double lat, double lon){

        if (map == null) {
            return null;
        }

        CircleOptions circleOptions = new CircleOptions()
                .center(new LatLng(lat, lon))
                .radius((float) 250.0)
                .strokeWidth(1)
                .fillColor(Color.parseColor("#4000AA00"))
                .strokeColor(Color.parseColor("#FF000000"));

        return map.addCircle(circleOptions);
    }

    @OnClick({
            R.id.btn_job_group,
            R.id.btn_clear_group,
            R.id.btn_add_photo,
            R.id.btn_pick_location
    })
    public void onClickButton(View view) {
        switch (view.getId()) {

            case R.id.btn_job_group:
                showJobsGroupDialog();
                break;

            case R.id.btn_clear_group:
                updateModel.setJobGroupId(0);
                btnJobGroup.setText(getString(R.string.do_select));

                break;

            case R.id.btn_add_photo:

                if (imagesAdapter.isUploading()) {
                    showAlertDialog(null, getString(R.string.images_is_uploading), null);
                    return;
                }

                if (updateModel.getWorkplaceImages().size() >= 8) {
                    showAlertDialog(null, getString(R.string.more_than_maximum_ad_images), null);
                    return;
                }

                showImagePicker();

                break;

            case R.id.btn_pick_location:
                pickLocation();
                break;

            default:
                break;
        }
    }

    /**
     * show dialog for get ads photo
     */
    @SuppressLint("CheckResult")
    private void showImagePicker() {

        Intent lassie = new Lassi(this)
                .with(LassiOption.CAMERA_AND_GALLERY)
                .setMaxCount(8 - updateModel.getWorkplaceImages().size())
                .setGridSize(3)
                .setPlaceHolder(R.drawable.ic_image_placeholder)
                .setErrorDrawable(R.drawable.ic_image_placeholder)
                .setStatusBarColor(R.color.colorPrimaryDark)
                .setToolbarColor(R.color.colorPrimary)
                .setToolbarResourceColor(android.R.color.white)
                .setProgressBarColor(R.color.colorAccent)
                .setCropType(CropImageView.CropShape.RECTANGLE)
                //.setCropAspectRatio(1, 1)
                .setCompressionRation(10)
                .enableActualCircleCrop()
                .setSupportedFileTypes("jpg", "jpeg", "png", "webp", "gif")
                .enableFlip()
                .enableRotate()
                .build();

        startActivityForResult(lassie, REQUEST_CODE_PICK_IMAGE);

    }

    @SuppressLint("CheckResult")
    void pickLocation() {

        RxPermissions rxPermissions = new RxPermissions(this);
        rxPermissions.request(
                Manifest.permission.ACCESS_COARSE_LOCATION,
                Manifest.permission.ACCESS_FINE_LOCATION)

                .subscribe(aBoolean -> {

                    if (aBoolean) {

                        if (isGPSEnabled()) {

                            // location not selected yet
                            if (String.valueOf((int) updateModel.getWorkplaceLat()).length() <= 1 && String.valueOf((int) updateModel.getWorkplaceLon()).length() <= 1) {

                                // use from user location
                                if (pref.getLocation().getLatitude() != 0 && pref.getLocation().getLongitude() != 0) {
                                    Intent intent = new Intent(this, LocationPickerActivity.class);
                                    intent.putExtra(Constants.KEY_LAT, pref.getLocation().getLatitude());
                                    intent.putExtra(Constants.KEY_LON, pref.getLocation().getLongitude());

                                    // set user current location
                                    PlaceModel place = new PlaceModel();
                                    place.setLat(pref.getLocation().getLatitude());
                                    place.setLon(pref.getLocation().getLongitude());

                                    LocationPickerActivity.start(this, getString(R.string.google_maps_key), place, REQUEST_CODE_PICK_ADDRESS);

                                    //Log.i("Soheil", "user current location, lat: " + App.getUser().getData().getProfile().getLat());
                                    //Log.i("Soheil", "user current location, lon: " + App.getUser().getData().getProfile().getLon());

                                    // user current location not found
                                } else {
                                    //Log.i("Soheil", "not found workplace, lat: " + updateModel.getWorkplaceLat());
                                    //Log.i("Soheil", "not found workplace, lon: " + updateModel.getWorkplaceLon());

                                    LocationPickerActivity.start(this, getString(R.string.google_maps_key), REQUEST_CODE_PICK_ADDRESS);
                                }

                                // ad location already set and user wants to update it
                            } else {
                                Intent intent = new Intent(this, LocationPickerActivity.class);
                                intent.putExtra(Constants.KEY_ADDRESS, updateModel.getWorkplaceAddress());
                                intent.putExtra(Constants.KEY_LAT, updateModel.getWorkplaceLat());
                                intent.putExtra(Constants.KEY_LON, updateModel.getWorkplaceLon());

                                PlaceModel place = new PlaceModel();
                                place.setAddress(updateModel.getWorkplaceAddress());
                                place.setLat(updateModel.getWorkplaceLat());
                                place.setLon(updateModel.getWorkplaceLon());

                                //Log.i("Soheil", "workplace last selected location, address: " + updateModel.getWorkplaceAddress());
                                //Log.i("Soheil", "workplace last selected location, lat: " + updateModel.getWorkplaceLat());
                                //Log.i("Soheil", "workplace last selected location, lon: " + updateModel.getWorkplaceLon());

                                LocationPickerActivity.start(this, getString(R.string.google_maps_key), place, REQUEST_CODE_PICK_ADDRESS);
                            }

                        } else {
                            showGPSDialog();
                        }

                    } else {
                        Toast.makeText(this, R.string.permission_request_denied,
                                Toast.LENGTH_LONG).show();
                    }

                }, Throwable::printStackTrace);
    }

    private boolean isGPSEnabled() {
        LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    }

    private void showGPSDialog() {

        new MaterialDialog.Builder(this)
                .contentGravity(Utility.getGravity())
                .itemsGravity(Utility.getGravity())
                .typeface(TypefaceUtil.getSansFont(), TypefaceUtil.getSansFont())
                .content(R.string.turn_on_gps_first)
                .positiveText(R.string.turn_on_gps)
                .negativeText(R.string.cancel)
                .onPositive((materialDialog, dialogAction) -> {

                    materialDialog.dismiss();

                    Intent callGPSSettingIntent = new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivityForResult(callGPSSettingIntent, REQUEST_TURN_ON_GPS);

                })
                .onNegative((materialDialog, dialogAction) -> materialDialog.dismiss())
                .show();
    }

    @Override
    protected void onActivityResult ( int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == RESULT_OK) {

            switch (requestCode) {

                case REQUEST_CODE_PICK_IMAGE:

                    ArrayList<MiMedia> selectedImages = (ArrayList<MiMedia>) data.getSerializableExtra(KeyUtils.SELECTED_MEDIA);

                    addImagesToUpload(selectedImages);
                    break;

                case REQUEST_CODE_PICK_ADDRESS:
                    try {

                        if (data != null) {

                            String name = data.getStringExtra(Constants.KEY_NAME);
                            String address = data.getStringExtra(Constants.KEY_ADDRESS);
                            double lat = data.getDoubleExtra(Constants.KEY_LAT, 0.0);
                            double lon = data.getDoubleExtra(Constants.KEY_LON, 0.0);

                            if (inputWorkplaceAddress.getText().toString().trim().isEmpty()) {
                                inputWorkplaceAddress.setText(address);

                            } else {

                                new MaterialDialog.Builder(this)
                                        .contentGravity(Utility.getGravity())
                                        .itemsGravity(Utility.getGravity())
                                        .content(R.string.do_you_want_to_replace_address)
                                        .positiveText(R.string.yes)
                                        .negativeText(R.string.no)
                                        .onPositive((materialDialog, dialogAction) -> {

                                            // replace selected address
                                            inputWorkplaceAddress.setText(TextUtil.checkNull(address));
                                        })
                                        .onNegative((materialDialog, dialogAction) -> materialDialog.dismiss())
                                        .show();
                            }

                            updateModel.setWorkplaceLat(lat);
                            updateModel.setWorkplaceLon(lon);

                            initializeLocation();
                        }

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    break;

                default:
                    break;
            }
        }
    }

    /**
     * upload ad images
     */
    private void addImagesToUpload(ArrayList<MiMedia> selectedImages) {

        if (!AppUtils.hasConnection()) {
            ToastUtils.shortToast(getString(R.string.no_internet_connection));
            return;
        }

        for (int i = 0; i < selectedImages.size(); i++) {
            profile.getData().getWorkplace().getImages().add(new Image(selectedImages.get(i).getPath(), Constants.STATUS_READY_TO_UPLOAD));
        }

        imagesAdapter.notifyDataSetChanged();

        imagesAdapter.setUploadListener(new ImagesAdapter.UploadListener() {
            @Override
            public void onImageUploaded(int pos, int mediaId) {
                updateModel.getWorkplaceImages().add(mediaId);

                //Log.i("Soheil", "onUploadImage res: " + updateModel.getWorkplaceImages());

                viewImagesPreview.setVisibility(updateModel.getWorkplaceImages().size() != 0 ? View.VISIBLE : View.GONE);

                imagesAdapter.notifyDataSetChanged();
            }

            @Override
            public void onImageRemoved(int pos) {

                //Log.i("Soheil", "00- old image array brfore removing: " + updateModel.getWorkplaceImages().toString());

                List<Integer> res = new ArrayList<>();

                for (Image i : imagesAdapter.getImages()) {
                    res.add(i.getId());
                }

                updateModel.setWorkplaceImages(res);

                //Log.i("Soheil", "11- onImageRemoved new images array: " + updateModel.getWorkplaceImages().toString());

                viewImagesPreview.setVisibility(updateModel.getWorkplaceImages().size() != 0 ? View.VISIBLE : View.GONE);

                imagesAdapter.notifyDataSetChanged();
            }

            @Override
            public void onError(Throwable t, int pos) {
                imagesAdapter.notifyDataSetChanged();
            }
        });

    }

}
